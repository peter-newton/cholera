{"version":3,"sources":["assets/venue_location_icon.svg","components/VenueLocationIcon.js","components/MarkerPopup.js","components/VenueMarkers.js","components/MapView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VenueLocationIcon","L","icon","iconUrl","require","iconRetinaUrl","iconAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","className","MarkerPopup","props","name","data","console","log","Popup","VenueMarkers","markers","venues","map","venue","index","Marker","key","position","geometry","MapView","state","currentLocation","lat","lng","zoom","this","Map","center","TileLayer","url","attribution","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,iD,6gaCE9BC,E,OAAoBC,EAAEC,KAAK,CACtCC,QAASC,EAAQ,IACjBC,cAAeD,EAAQ,IACvBE,WAAY,KACZC,UAAW,KACXC,WAAY,KACZC,aAAc,KACdC,SAAU,CAAC,GAAI,IACfC,UAAW,uB,QCEEC,EATK,SAACC,GAAW,IACtBC,EAASD,EAAME,KAAfD,KAGR,OAFAE,QAAQC,IAAIH,GAEH,kBAACI,EAAA,EAAD,KACP,yBAAKP,UAAU,aAAaG,KCSjBK,EAZM,SAACN,GAAW,IAGzBO,EAFaP,EAAXQ,OAEeC,KAAI,SAACC,EAAOC,GAAR,OACzB,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAOG,SAAUJ,EAAMK,SAAU1B,KAAMF,GAClD,kBAAC,EAAD,CAAae,KAAMQ,QAIvB,OAAO,kBAAC,WAAD,KAAWH,ICiBLS,E,kDAxBb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,MAAQ,CACXC,gBAAiB,CAAEC,IAAK,SAAUC,IAAK,UACvCC,KAAM,IAJS,E,qDAQT,IAAD,EAC2BC,KAAKL,MAA/BC,EADD,EACCA,gBAAiBG,EADlB,EACkBA,KAEzB,OACE,kBAACE,EAAA,EAAD,CAAKC,OAAQN,EAAiBG,KAAMA,GAClC,kBAACI,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAGd,kBAAC,EAAD,CAASnB,OAAQN,EAAKM,c,GAnBRoB,a,MCMPC,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCKcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82b28cd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/venue_location_icon.bd6f36a3.svg\";","import L from 'leaflet';\r\n\r\nexport const VenueLocationIcon = L.icon({\r\n  iconUrl: require('../assets/venue_location_icon.svg'),\r\n  iconRetinaUrl: require('../assets/venue_location_icon.svg'),\r\n  iconAnchor: null,\r\n  shadowUrl: null,\r\n  shadowSize: null,\r\n  shadowAnchor: null,\r\n  iconSize: [35, 35],\r\n  className: 'leaflet-venue-icon'\r\n});\r\n","import React from 'react';\r\nimport {Popup} from 'react-leaflet';\r\n\r\nconst MarkerPopup = (props) => {\r\n  const { name } = props.data;\r\n  console.log(name);\r\n\r\n  return  (<Popup>\r\n    <div className='poup-text'>{name}</div>\r\n  </Popup>);\r\n};\r\n\r\nexport default MarkerPopup;\r\n","import React, { Fragment } from 'react'\r\nimport {Marker} from 'react-leaflet';\r\nimport {VenueLocationIcon} from './VenueLocationIcon';\r\nimport MarkerPopup from './MarkerPopup';\r\n\r\nconst VenueMarkers = (props) => {\r\n  const { venues } = props;\r\n\r\n  const markers = venues.map((venue, index) => (\r\n    <Marker key={index} position={venue.geometry} icon={VenueLocationIcon} >\r\n      <MarkerPopup data={venue}/>\r\n    </Marker>\r\n  ));\r\n\r\n  return <Fragment>{markers}</Fragment>\r\n};\r\n\r\nexport default VenueMarkers;\r\n","import React, { Component } from 'react';\r\nimport { Map, TileLayer } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport data from '../assets/data';\r\nimport Markers from './VenueMarkers';\r\n\r\nclass MapView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentLocation: { lat: 52.52437, lng: 13.41053 },\r\n      zoom: 12,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { currentLocation, zoom } = this.state;\r\n\r\n    return (\r\n      <Map center={currentLocation} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n        />\r\n\r\n        <Markers venues={data.venues}/>\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapView;\r\n","import React from 'react';\r\nimport MapView from './components/MapView';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MapView/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}